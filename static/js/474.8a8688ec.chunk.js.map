{"version":3,"file":"static/js/474.8a8688ec.chunk.js","mappings":"2KAIA,MAAMA,EAAcC,IAAe,IAAd,KAAEC,GAAMD,EAE3B,MAAME,GAAUC,EAAAA,EAAAA,QAAO,MAIjBC,GAAkBC,EAAAA,EAAAA,UAAQ,IACvBJ,EAAKK,SAASC,GACnBC,OAAOC,KAAKF,GACTG,QAAQC,GAAgB,SAARA,IAChBC,KAAKC,IAAM,CACVC,KAAM,IAAIA,KAAKP,EAAEO,MACjBC,MAAOR,EAAEM,GACTG,eAAgBH,SAGrB,CAACZ,IAGEgB,EAAa,CAAC,WAAY,SAAU,OAAQ,WAoFlD,OAnFAb,EAAgBc,MACd,CAACC,EAAGC,IACFH,EAAWI,QAAQF,EAAEH,gBACrBC,EAAWI,QAAQD,EAAEJ,mBAIzBM,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAOC,EAAAA,GAAU,CACrBC,MAAO,CACLC,SAAU,GACVC,gBAAiB,UACjBC,MAAO,OACPC,WAAY,QAEdC,MAAO,IACPC,OAAQ,IACRC,aAAc,GACdC,WAAY,GACZC,YAAa,GACbC,MAAO,CACLX,EAAAA,GAAWpB,EAAiB,CAC1BgC,EAAG,OACHC,GAAI,EACJC,EAAG,QACHC,KAAM,iBACNC,YAAa,GACbC,EAAG,mBAELjB,EAAAA,GAAWpB,EAAiB,CAC1BgC,EAAG,OACHE,EAAG,QACHI,OAAQ,iBACRC,MAAO,SACPF,EAAG,mBAELjB,EAAAA,GACEpB,EACAoB,EAAAA,GAAa,CACXY,EAAG,OACHE,EAAG,QACHM,MAAQrC,GACN,SAASA,EAAEO,KAAK+B,yBACdtC,EAAES,oBACET,EAAEQ,MAAM+B,QAAQ,KACxBP,KAAM,OACNQ,YAAa,EACbrB,SAAU,GACVgB,OAAQ,UAKZlB,EAAAA,GAAW,CAAC,KAEdI,MAAO,CACLoB,OAAQ,CAAC,UAAW,WAAY,SAAU,QAC1CC,MAAO,CAAC,UAAW,UAAW,UAAW,YAE3Cb,EAAG,CACDc,KAAM,OACNC,MAAO,EACPC,SAAU,GACVC,WAAa9C,GACXA,EAAE+C,eAAe,QAAS,CAAEC,MAAO,QAASC,KAAM,aAEtDlB,EAAG,CACDmB,MAAO,aACPC,YAAa,SACbC,YAAa,GACbC,MAAM,EACNT,MAAO,EACPE,WAAa9C,GAAM,KAAKA,EAAI,KAAWuC,QAAQ,SAMnD,OAFA5C,EAAQ2D,QAAQC,YAAYvC,GAErB,KACLA,EAAKwC,QAAQ,CACd,GACA,CAAC3D,KAGF4D,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,UAAW,GAAIC,UACxBJ,EAAAA,EAAAA,KAAA,OAAKK,IAAKnE,KACN,EAKV,EAAeoE,EAAAA,KAAWvE,E","sources":["components/CryptoChart.jsx"],"sourcesContent":["import React, { useEffect, useRef, useMemo } from \"react\";\nimport * as Plot from \"@observablehq/plot\";\nimport { Box } from \"@mui/material\";\n\nconst CryptoChart = ({ data }) => {\n  // Create a reference to hold the plot DOM element\n  const plotRef = useRef(null);\n\n  // Convert the data from wide format to long format\n  // Memoize the transformed data to prevent unnecessary recalculations on every render\n  const transformedData = useMemo(() => {\n    return data.flatMap((d) =>\n      Object.keys(d)\n        .filter((key) => key !== \"Date\")\n        .map((crypto) => ({\n          Date: new Date(d.Date),\n          Price: d[crypto],\n          Cryptocurrency: crypto,\n        }))\n    );\n  }, [data]);\n\n  // Sort transformedData to control the drawing order by cryptocurrency color\n  const colorOrder = [\"Ethereum\", \"Solana\", \"USDC\", \"Bitcoin\"];\n  transformedData.sort(\n    (a, b) =>\n      colorOrder.indexOf(a.Cryptocurrency) -\n      colorOrder.indexOf(b.Cryptocurrency)\n  );\n\n  // useEffect is used to create and clean up the chart when data changes\n  useEffect(() => {\n    const plot = Plot.plot({\n      style: {\n        fontSize: 16,\n        backgroundColor: \"#1b1f2a\",\n        color: \"#fff\",\n        fontWeight: \"bold\",\n      },\n      width: 1000,\n      height: 600,\n      marginBottom: 50,\n      marginLeft: 90,\n      marginRight: 20,\n      marks: [\n        Plot.areaY(transformedData, {\n          x: \"Date\",\n          y2: 0, // Start areas from y = 0 (baseline)\n          y: \"Price\", // Height of areas corresponds to Price\n          fill: \"Cryptocurrency\",\n          fillOpacity: 0.6,\n          z: \"Cryptocurrency\", // Group areas by Cryptocurrency\n        }),\n        Plot.lineY(transformedData, {\n          x: \"Date\",\n          y: \"Price\",\n          stroke: \"Cryptocurrency\",\n          curve: \"linear\",\n          z: \"Cryptocurrency\", // Group by Cryptocurrency\n        }),\n        Plot.tip(\n          transformedData,\n          Plot.pointer({\n            x: \"Date\",\n            y: \"Price\",\n            title: (d) =>\n              `Date: ${d.Date.toLocaleDateString()}\\n${\n                d.Cryptocurrency\n              }: $${d.Price.toFixed(2)}`,\n            fill: \"#000\",\n            textPadding: 8,\n            fontSize: 14,\n            stroke: \"#fff\",\n          })\n        ),\n\n        // Add a baseline (y=0) for visual reference\n        Plot.ruleY([0]),\n      ],\n      color: {\n        domain: [\"Bitcoin\", \"Ethereum\", \"Solana\", \"USDC\"], // Control the order of the colors\n        range: [\"#FF9900\", \"#3C3CFF\", \"#00FFA2\", \"#FF00FF\"], // Assign specific colors to each cryptocurrency\n      },\n      x: {\n        type: \"time\", // Ensure that the x-axis is treated as a time scale\n        ticks: 6,\n        tickSize: 10,\n        tickFormat: (d) =>\n          d.toLocaleString(\"en-US\", { month: \"short\", year: \"numeric\" }), // Format date as 'MMM YYYY'\n      },\n      y: {\n        label: \"DEX Volume\", // Label for the y-axis\n        labelAnchor: \"center\",\n        labelOffset: 70,\n        grid: true,\n        ticks: 5,\n        tickFormat: (d) => `$${(d / 1_000_000).toFixed(0)}M`, // Format y-axis tick marks in millions with a dollar sign\n      },\n    });\n\n    plotRef.current.appendChild(plot);\n\n    return () => {\n      plot.remove(); // This prevents memory leaks and ensures that old plots are removed\n    };\n  }, [transformedData]);\n\n  return (\n    <Box sx={{ marginTop: 3 }}>\n      <div ref={plotRef} />\n    </Box>\n  );\n};\n\n// Wrap the component with React.memo to prevent unnecessary re-renders\nexport default React.memo(CryptoChart);\n"],"names":["CryptoChart","_ref","data","plotRef","useRef","transformedData","useMemo","flatMap","d","Object","keys","filter","key","map","crypto","Date","Price","Cryptocurrency","colorOrder","sort","a","b","indexOf","useEffect","plot","Plot","style","fontSize","backgroundColor","color","fontWeight","width","height","marginBottom","marginLeft","marginRight","marks","x","y2","y","fill","fillOpacity","z","stroke","curve","title","toLocaleDateString","toFixed","textPadding","domain","range","type","ticks","tickSize","tickFormat","toLocaleString","month","year","label","labelAnchor","labelOffset","grid","current","appendChild","remove","_jsx","Box","sx","marginTop","children","ref","React"],"sourceRoot":""}